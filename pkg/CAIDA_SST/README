


CONTAINS

-An AS is a logical region, which contains an AliasSet (Node) completely
-A country is physical region that contains smaller regions (cities)
-AliasSets contain one or more IPs uniquely
-If singleton IPs, AliasSet/IP contains IP/IP

EXPRESS

-Regions/Cities have GeoCoordinates but don't contain them, as they are unique
-DNS is an attribute of an IP address, or vice versa, since several DNS could be at one IP.
-IP addresses are connected uniquely to other IP addresses (of the same type)
-AliasSets (routers) are connected to other AliasSets

NEAR

IPs connect to other IPs
AliasSets connect to other AliasSets
Regions can connect to other regions (geographically or via IP)
Countries can connect to other countries (geographically or via IP)

After running, we can add a geo index for searching:

GEO-SEARCHING
-------------

arangosh

db._useDatabase("ITDK-snapshot")

db.Region.ensureIndex({ type: "geo", fields: [ "coordinates" ], geoJson:true })

db._query('FOR reg IN Region SORT GEO_DISTANCE([-10.5, 26.1], reg.cooordinate) ASC RETURN reg._key')

db._query('FOR reg IN Region RETURN { name: reg._key, distance: GEO_DISTANCE([0,0], reg.coordinates) }')

db._query('FOR reg IN Region FILTER GEO_DISTANCE([0,0],reg.coordinates) < 10000 RETURN reg')

db._query('FOR reg IN Region FILTER GEO_DISTANCE([4.60971 -74.08175],reg.coordinates) < 400000000 RETURN reg')

// Show IP addresses for an AliasSet N1

db._query('FOR ip in Contains FILTER ip.semantics == "HAS_INTERFACE" && ip._from == "AliasSets/N1"  RETURN ip._to')

// Show Regions within 40,000 km of x,y
// (Region) _to: region <--ASET_IN-- _from: aset

db._query('FOR reg IN Region FILTER GEO_DISTANCE([4.60971, -74.08175],reg.coordinates) < 400000000 FOR aset IN Contains FILTER aset.semantics == "ASET_IN" FILTER aset._to == reg._id RETURN aset._to')

// Show AsiasSets within 40,000 km of x,y
// (Region) _to: region <--ASET_IN-- _from: aset  

db._query('FOR reg IN Region FILTER GEO_DISTANCE([4.60971, -74.08175],reg.coordinates) < 400000000 FOR aset IN Contains FILTER aset.semantics == "ASET_IN" FILTER aset._to == reg._id RETURN aset._from')

// Show IP addresses within 40,000 km of x,y
// (Region) _to: region <--ASET_IN(CONTAINS)-- _from: aset ---HAS_INTERFACE(CONTAINS) ---> IP

db._query('FOR reg IN Region FILTER GEO_DISTANCE([4.60971, -74.08175],reg.coordinates) < 400000000 FOR aset IN Contains FILTER aset.semantics == "ASET_IN" FILTER aset._to == reg._id FOR aif IN Contains FILTER aif.semantics=="HAS_INTERFACE" && aif._from == aset._from RETURN aif._to')

SHORTEST-PATH
--------------

Now we've separated semantics (CONTAINS,EXPRESSES) from routing adjacency function (NEAR)

ADJ_NODE - we can follow routes between AliasSets (this is what we have direct data for)
ADJ_IP   - we can follow routes between interfaces (point to point, need to be joined through AliasSets)

// Show neighbours of N2

db._query('FOR a in Near FILTER a.semantics == "ADJ_NODE" && a._from == "AliasSets/N2" RETURN a._to')

// Traverse graph from N2

db._query('FOR v, e, p IN 1..5 OUTBOUND "AliasSets/N2" GRAPH "concept_spacetime" RETURN { vertices: p.vertices[*]._key, edges: p.edges[*].semantics }')

// Show shortest path from N2 to N495438

db._query("FOR v, e IN ANY SHORTEST_PATH 'AliasSets/N2' TO 'AliasSets/N495438' Near RETURN [v._key, e.semantics]");
